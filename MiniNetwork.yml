AWSTemplateFormatVersion: 2010-09-09
Description: AWS Cloudformation template to create Mini Network for IaC ATU

# Parameters

Parameters:
  EnvTag:
    Description: Environment Name
    Type: String
    Default: DKAtuMiniNetwork
  KeyName:
    Description: Key Pair name
    Type: AWS::EC2::KeyPair::KeyName
    Default: keypair01
  MultiAZa:
    Description: Availability Zone a
    Type: String
    Default: us-east-1a
  MultiAZb:
    Description: Availability Zone b
    Type: String
    Default: us-east-1b
  MultiAZDB:
    Description: Multi AZ parameter for RDS DB, set true to enable
    Type: String
    Default: 'true'
  DBName:
    Description: Name of DB
    Type: String
    Default: DBName
  UserDB:
    Description: Default DB User name
    Type: String
    Default: UserName
  PassDB:
    Description: Default DB Password
    Type: String
    Default: Password
  EC2InstanceType:
    Description: Default type for EC2 instances
    Type: String
    Default: t3.nano
  RDSInstanceType:
    Description: Default type for RDS instance
    Type: String
    Default: db.t2.micro
  EC2ImageId:
    Description: Image ID for EC2 instances
    Type: String
    Default: ami-0bb4c991fa89d4b9b

# CIDR Tables
  CIDRVpc:
    Description: CIDR for VPC
    Type: String
    Default: 10.10.0.0/16

  CIDRPublicSubA:
    Description: CIDR for Public Subnet A
    Type: String
    Default: 10.10.10.0/24

  CIDRPublicSubB:
    Description: CIDR for Public Subnet B
    Type: String
    Default: 10.10.11.0/24

  CIDRPrivateSubA:
    Description: CIDR for Private Subnet A
    Type: String
    Default: 10.10.20.0/24

  CIDRPrivateSubB:
    Description: CIDR for Private Subnet B
    Type: String
    Default: 10.10.21.0/24

  # CIDRRdsSub:
  #   Type: String
  #   Default: 10.10.30.0/24

# Resources
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref CIDRVpc
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway


  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  NatGatewayAEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: VPC

  NatGatewayBEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: VPC

  NatGatewayA:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayAEIP.AllocationId
      SubnetId: !Ref PublicSubnetA

  NatGatewayB:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayBEIP.AllocationId
      SubnetId: !Ref PublicSubnetB

  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetA

  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetB

  PrivateRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  DefaultPrivateRouteA:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayA

  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      SubnetId: !Ref PrivateSubnetA

  PrivateRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  DefaultPrivateRouteB:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayB

  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      SubnetId: !Ref PrivateSubnetB

  PublicSubnetA:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        AvailabilityZone: !Ref MultiAZa
        CidrBlock: !Ref CIDRPublicSubA
        MapPublicIpOnLaunch: true

  PublicSubnetB:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        AvailabilityZone: !Ref MultiAZb
        CidrBlock: !Ref CIDRPublicSubB
        MapPublicIpOnLaunch: true

  PrivateSubnetA:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        AvailabilityZone: !Ref MultiAZa
        CidrBlock: !Ref CIDRPrivateSubA
        MapPublicIpOnLaunch: false

  PrivateSubnetB:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        AvailabilityZone: !Ref MultiAZb
        CidrBlock: !Ref CIDRPrivateSubB
        MapPublicIpOnLaunch: false

  WebServerLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    DependsOn:
      - InternetGatewayAttachment
      - WebServerGroup
    Properties:
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB

  WebServerLBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WebServerLBTargetGroup
      LoadBalancerArn: !Ref WebServerLoadBalancer
      Port: '80'
      Protocol: HTTP

  WebServerLBTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !Ref VPC

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties: 
      LaunchTemplateName: WebServerLaunchTemplate
      LaunchTemplateData:
        ImageId: !Ref EC2ImageId
        InstanceType: !Ref EC2InstanceType
        KeyName: !Ref KeyName
        SecurityGroupIds: 
          - !Ref WebServerSecurityGroup

  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable access via port 80 and 22
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC

  WebServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MaxSize: '2'
      MinSize: '1'
      TargetGroupARNs:
        - !Ref WebServerLBTargetGroup
      VPCZoneIdentifier:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet Group for RDS instance
      DBSubnetGroupName: DBSubnetGroup
      SubnetIds: 
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB

  DBServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: DB Access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          SourceSecurityGroupId: !Ref ApplicationServerSecurityGroup
      VpcId: !Ref VPC

  ApplicationServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: App server access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          SourceSecurityGroupId: !Ref JumpBoxSecurityGroup
      VpcId: !Ref VPC
  
  JumpBoxSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: App server access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
      VpcId: !Ref VPC

  MySQLDatabase:
    Description: RDS DB instance spanning both AZ-a and AZ-b
    Type: 'AWS::RDS::DBInstance'
    DependsOn: DBSubnetGroup
    Properties:
      DBSubnetGroupName: DBSubnetGroup
      Engine: MySQL
      DBName: !Ref DBName
      MultiAZ: !Ref MultiAZDB
      MasterUsername: !Ref UserDB
      MasterUserPassword: !Ref PassDB
      DBInstanceClass: !Ref RDSInstanceType
      AllocatedStorage: '5'
      VPCSecurityGroups:
        - !Ref DBServerSecurityGroup

  JumpBoxA:
    Description: JumpBox EC2 instance in AZ-a
    Type: AWS::EC2::Instance
    Properties:
      SubnetId: !Ref PublicSubnetA
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref JumpBoxSecurityGroup
      InstanceType: !Ref EC2InstanceType
      ImageId: !Ref EC2ImageId

  JumpBoxB:
    Description: JumpBox EC2 instance in AZ-b
    Type: AWS::EC2::Instance
    Properties:
      SubnetId: !Ref PublicSubnetB
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref JumpBoxSecurityGroup
      InstanceType: !Ref EC2InstanceType
      ImageId: !Ref EC2ImageId

  ApplicationServerA:
    Description: Application Server EC2 instance in AZ-a
    Type: AWS::EC2::Instance
    Properties:
      SubnetId: !Ref PrivateSubnetA
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref ApplicationServerSecurityGroup
        - !Ref JumpBoxSecurityGroup
      InstanceType: !Ref EC2InstanceType
      ImageId: !Ref EC2ImageId

  ApplicationServerB:
    Description: Application Server EC2 instance in AZ-a
    Type: AWS::EC2::Instance
    Properties:
      SubnetId: !Ref PrivateSubnetB
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref ApplicationServerSecurityGroup
        - !Ref JumpBoxSecurityGroup
      InstanceType: !Ref EC2InstanceType
      ImageId: !Ref EC2ImageId